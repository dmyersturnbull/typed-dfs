# SPDX-License-Identifier Apache-2.0
# Source: https://github.com/dmyersturnbull/typed-dfs
#
[metadata]
description-file = "README.md"

[build-system]
# virtualenv 20.0.34 partly breaks pre-commit under conda
# https://github.com/ContinuumIO/anaconda-issues/issues/12094
# Poetry uses pip and setuptools (although they're not included as dependencies)
# We don't need to list wheel here, but setting a min vr can avoid generating inferior wheels
requires = ["poetry-core>=1.4,<2", "virtualenv>=20.0.33", "wheel>=0.36,<1.0"]
build-backend = "poetry.core.masonry.api"


#########################################################################################
# Poetry metadata
#########################################################################################

[tool.poetry]
name = "typeddfs"
version = "0.17.0"
description = "Pandas DataFrame subclasses that enforce structure and can self-organize."
authors = ["Douglas Myers-Turnbull"]
maintainers = ["dmyersturnbull"]
license = "Apache-2.0"
readme = "README.md"
keywords = ["pandas", "typing", "columns", "structured"]
homepage = "https://github.com/dmyersturnbull/typed-dfs"
repository = "https://github.com/dmyersturnbull/typed-dfs"
documentation = "https://typed-dfs.readthedocs.io"
classifiers = [
  "Development Status :: 4 - Beta",
  "Natural Language :: English",
  "Programming Language :: Python :: 3 :: Only",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Environment :: Console",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
include = []

[tool.poetry.urls]
CI = "https://github.com/dmyersturnbull/typed-dfs/actions"
"Bug Tracker" = "https://github.com/dmyersturnbull/typed-dfs/issues"
Download = "https://pypi.org/project/typeddfs/"


#########################################################################################
# Poetry build & dependencies
#########################################################################################

[tool.poetry.dependencies]
python                   = "^3.9"
defusedxml               = {version=">=0.7", optional=true}
natsort                  = ">=8.3"
orjson                   = ">=3.7"
pandas                   = ">=1.5.2"
regex                    = ">=2023"
tabulate                 = ">=0.8"
# we don't care about the exact versions, as long as tabulate and pandas accept them
wcwidth                  = ">=0.2"
pyarrow                  = {version=">=11", optional=true}
lxml                     = {version=">=4.9", optional=true}
lz4                      = {version=">=4.1", optional=true}
openpyxl                 = {version=">=3.1", optional=true}
pyxlsb                   = {version=">=1", optional=true}
html5lib                 = {version=">=1", optional=true}
beautifulsoup4           = {version=">=4.11", optional=true}
tomlkit                  = {version=">=0.11.6", optional=true}
zstandard                = {version="0.21.0", optional=true}

#===== Test dependencies =====#
[tool.poetry.group.test.dependencies]
bandit                        = ">=1.7"
flake8                        = "^6"
coverage                      = {version = "^7", extras = ["toml"]}
nbqa                          = "^1.7"
pre-commit                    = "^3.3"
pydocstyle                    = ">=6"
pytest                        = "^7"
pytest-cov                    = "^4"

#===== Doc dependencies =====#
[tool.poetry.group.docs.dependencies]
sphinx                    = "^7"
sphinx-autoapi            = "^2"
sphinx-copybutton         = ">=0.5"
furo                      = ">=2023"

[tool.poetry.extras]
feather = ["pyarrow"]
parquet = ["pyarrow"]  # fastparquet will also work
toml = ["tomlkit"]
xml = ["lxml"]
excel = ["openpyxl", "defusedxml"]
xlsb = ["pyxlsb"]
lz4 = ["lz4"]
zstd = ["zstandard"]
#hdf5    = ["tables"]
html = ["html5lib", "beautifulsoup4"]
main = ["pyarrow", "lxml", "openpyxl", "defusedxml", "tomlkit", "lz4", "zstandard"]
all = [
    "pyarrow",
    "lxml",
    "openpyxl",
    "defusedxml",
    "tomlkit",
    "lz4",
    "pyxlsb",
    "html5lib",
    "beautifulsoup4",
    "zstandard",
]


#########################################################################################
# Testing
#########################################################################################

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


#########################################################################################
# Style checking
#########################################################################################

[tool.coverage.paths]
source = ["typeddfs"]

[tool.coverage.run]
source = ["typeddfs"]

[tool.coverage.report]
show_missing = true

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]
